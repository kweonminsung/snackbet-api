// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url      = env("DB_URL")
}

model Account {
  id            String   @id @mysql.VarChar(255)
  walletAddress String   @unique @mysql.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isAdmin       Boolean  @default(false)

  createdChatRooms     ChatRoom[]
  joinedChatRooms      ChatRoomAccount[]
  messages             Message[]
  createdBettings      Betting[]
  participatedBettings AccountBetting[]
  BettingWhiteList     BettingWhiteList[]

  @@map("account")
}

model ChatRoom {
  id          String   @id @mysql.VarChar(255)
  name        String   @mysql.VarChar(255)
  description String   @mysql.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creatorId String?  @mysql.VarChar(255)
  creator   Account? @relation(fields: [creatorId], references: [id])

  messages     Message[]
  participants ChatRoomAccount[]

  @@map("chat_room")
}

model ChatRoomAccount {
  id        String   @id @mysql.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId  String   @mysql.VarChar(255)
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  chatRoomId String   @mysql.VarChar(255)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("chat_room_account")
}

model Message {
  id        String   @id @mysql.VarChar(255)
  content   String   @mysql.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String?  @mysql.VarChar(255)
  sender     Account? @relation(fields: [senderId], references: [id])
  chatRoomId String   @mysql.VarChar(255)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("message")
}

enum GovernanceType {
  PUBLIC
  PRIVATE
}

model Betting {
  id             String         @id @mysql.VarChar(255)
  name           String         @mysql.VarChar(255)
  ended          Boolean        @default(false)
  endDate        DateTime?
  governanceType GovernanceType
  eventSource    String?
  isSettled      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  creatorId String  @mysql.VarChar(255)
  creator   Account @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  options      BettingOption[]
  participants AccountBetting[]
  whiteList    BettingWhiteList[]

  @@map("betting")
}

model BettingWhiteList {
  id        String   @id @mysql.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId String  @mysql.VarChar(255)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bettingId String  @mysql.VarChar(255)
  Betting   Betting @relation(fields: [bettingId], references: [id], onDelete: Cascade)

  @@map("betting_white_list")
}

model BettingOption {
  id          String   @id @mysql.VarChar(255)
  name        String   @mysql.VarChar(255)
  description String   @mysql.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bettingId String  @mysql.VarChar(255)
  betting   Betting @relation(fields: [bettingId], references: [id], onDelete: Cascade)

  participants AccountBetting[]

  @@map("betting_option")
}

model AccountBetting {
  id        String    @id @mysql.VarChar(255)
  amount    Float     @mysql.Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  accountId String        @mysql.VarChar(255)
  account   Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bettingId String        @mysql.VarChar(255)
  betting   Betting       @relation(fields: [bettingId], references: [id], onDelete: Cascade)
  optionId  String        @mysql.VarChar(255)
  option    BettingOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("account_betting")
}
